version: '3.8'

networks:
  taylordash:
    name: taylordash

volumes:
  postgres_data:
  mosquitto_data:
  mosquitto_logs:
  minio_data:
  prometheus_data:
  grafana_data:
  victoria_data:

services:
  # Reverse proxy with TLS and security headers
  traefik:
    image: traefik:2.10
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"  # Dashboard
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./infra/traefik:/etc/traefik:ro
      - ./certs:/certs:ro
    networks:
      - taylordash
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8080/ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "traefik.enable=true"

  # PostgreSQL database
  postgres:
    image: postgres:15
    restart: unless-stopped
    environment:
      POSTGRES_DB: taylordash
      POSTGRES_USER: taylordash
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-taylordash}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infra/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - taylordash
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U taylordash -d taylordash"]
      interval: 30s
      timeout: 10s
      retries: 3

  # VictoriaMetrics (default TSDB)
  victoriametrics:
    image: victoriametrics/victoria-metrics:latest
    restart: unless-stopped
    ports:
      - "8428:8428"
    volumes:
      - victoria_data:/victoria-metrics-data
    command:
      - '--storageDataPath=/victoria-metrics-data'
      - '--httpListenAddr=:8428'
      - '--retentionPeriod=30d'
      - '--maxConcurrentInserts=4'
    networks:
      - taylordash
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8428/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # TimescaleDB (optional profile)
  timescale:
    image: timescale/timescaledb:latest-pg15
    restart: unless-stopped
    environment:
      POSTGRES_DB: taylordash_ts
      POSTGRES_USER: taylordash
      POSTGRES_PASSWORD: ${TIMESCALE_PASSWORD:-taylordash}
    volumes:
      - ./infra/timescale/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - taylordash
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U taylordash -d taylordash_ts"]
      interval: 30s
      timeout: 10s
      retries: 3
    profiles:
      - timescale

  # MinIO S3-compatible storage
  minio:
    image: minio/minio:latest
    restart: unless-stopped
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-taylordash}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-taylordash123}
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    networks:
      - taylordash
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Mosquitto MQTT broker
  mosquitto:
    image: eclipse-mosquitto:2
    restart: unless-stopped
    ports:
      - "1883:1883"
      - "8883:8883"
    volumes:
      - ./infra/mosquitto/mosquitto.conf:/mosquitto/config/mosquitto.conf:ro
      - ./infra/mosquitto/password_file:/mosquitto/config/password_file:ro
      - ./certs:/mosquitto/certs:ro
      - mosquitto_data:/mosquitto/data
      - mosquitto_logs:/mosquitto/log
    networks:
      - taylordash
    healthcheck:
      test: ["CMD", "mosquitto_pub", "-h", "localhost", "-t", "test", "-m", "health", "-u", "taylordash", "-P", "taylordash"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus metrics collection
  prometheus:
    image: prom/prometheus:latest
    restart: unless-stopped
    volumes:
      - ./infra/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    networks:
      - taylordash
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Grafana visualization
  grafana:
    image: grafana/grafana:latest
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_INSTALL_PLUGINS: grafana-piechart-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infra/grafana/provisioning:/etc/grafana/provisioning:ro
    networks:
      - taylordash
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API service
  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    restart: unless-stopped
    environment:
      DATABASE_URL: postgresql://taylordash:${POSTGRES_PASSWORD:-taylordash}@postgres:5432/taylordash
      MQTT_HOST: mosquitto
      MQTT_PORT: 1883
      MQTT_USERNAME: taylordash
      MQTT_PASSWORD: taylordash
      OTEL_EXPORTER_OTLP_ENDPOINT: http://jaeger:4317
    volumes:
      - ./backend:/app
    networks:
      - taylordash
    depends_on:
      postgres:
        condition: service_healthy
      mosquitto:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/ready"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backend.rule=Host(`taylordash.local`) && PathPrefix(`/api`)"
      - "traefik.http.services.backend.loadbalancer.server.port=8000"